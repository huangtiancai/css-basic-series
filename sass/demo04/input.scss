// 嵌套规则
// 一个给定的规则块，既可以像普通的CSS那样包含属性，又可以嵌套其他规则块。
// 当你同时要为一个容器元素及其子元素编写特定样式时，这种能力就非常有用了

// 例1
// 如下；CSS中需要重复一遍又一遍地写同一个ID
// #content{ background-color: #f5f5f5;}
// #content article h1 { color: #333 }
// #content article p { margin-bottom: 1.4em }
// #content aside { background-color: #EEE }

// sass可以让你只写一遍，且使样式可读性更高
#content{
  // 容器元素的样式规则会被单独抽离出来
  background-color: #f5f5f5;
  aside{
    background-color: #EEE;
  }
  article{
    h1{color: #333;}
    p{margin-bottom: 1.4em;}    
  }
}

// 大多数情况下这种简单的嵌套都没问题，但是有些场景下不行，比如你想要在嵌套的选择器里边立刻应用一个类似于：hover的伪类
// 为了解决这种以及其他情况，sass提供了一个特殊结构 &。

// 父选择器的标识符& 使用
article a{
  color: blue;
  &:hover{color: red;}
}
// 同时父选择器标识符还有另外一种用法，你可以在父选择器之前添加选择器
// 如下父选择器之前添加了选择器body.ie=>body.ie #content aside{}
#content aside{
  color:tomato;
  body.ie & {color: red;}
}


// 例2
.nav{
  ul{
    margin: 0;
    padding: 0;
    list-style: none;
  }

  li{
    display: inline-block;
  }

  a{
    display: block;
    padding: 6px 12px;
    text-decoration: none;
  }
}


// 群组选择器的嵌套
.container{
  h1,h2,h3{color: green;}
}

nav,aside{
  a{color: red;}
}

article {
  // 同层全体组合选择器~
  ~ article{border-top: 1px dashed #ccc }
  // 子组合选择器>选择一个元素的直接子元素
  > section{background:#eee}
  dl > {
    dt{color: #333;}
    dd{color: #555;}
  }
  // 同层相邻组合选择器+选择nav元素后紧跟的article 元素
  nav + & {margin-top: 0;}
}

// 嵌套属性
nav{
  border:{
    style: solid;
    width:1px;
    color:#ccc
  }
}

// 对于属性的缩写形式，你甚至可以像下边这样来嵌套，指明例外规则：
nav{
  border:1px solid #ccc{
    left: 0px;
    right: 0px;
  }
}


